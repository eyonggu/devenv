"""""""""""""""""""""""""""""""""""""
" Golbal options/features
""""""""""""""""""""""""""""""""""""""
set nocompatible
set number
set ruler
set hls
set showcmd
set incsearch
set laststatus=2
set diffopt=vertical,iwhite
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
set foldmethod=indent
set foldlevel=100
set autowrite
"Set to auto read when a file is changed from the outside
set autoread

syntax on
"enable file type dection
filetype plugin indent on

colorscheme desert
"default is bad in MobaXterm
"color names: https://vim.fandom.com/wiki/Xterm256_color_names_for_console_Vim
hi Search ctermbg=21

""""""""""""""""""""""""""""""""""""""
"INCIDENT SETTING
""""""""""""""""""""""""""""""""""""""
"use cindent stead of autoindent
set cindent shiftwidth=4
set autoindent
"hitting Tab in insert mode will produce the appropriate number of spaces
set expandtab
set softtabstop=4

"for Cygwin
set backspace=2


""""""""""""""""""""""""""""""""""""""
" Autocmd
""""""""""""""""""""""""""""""""""""""
" When vimrc is edited, reload it
autocmd! bufwritepost .vimrc source ~/.vimrc

"remove trailing spaces for any kind of file, shouldn't?
"autocmd BufWritePre *.cpp,*.c,*.cc,*.h,*.hh :%s/\s\+$//e
autocmd BufWritePre * :%s/\s\+$//e

autocmd InsertEnter * hi StatusLine ctermbg=1
autocmd InsertLeave * hi StatusLine ctermbg=0

autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd Filetype go setlocal tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType go nmap <Leader>i <Plug>(go-info)
au filetype go inoremap <buffer> . .<C-x><C-o>

au FileType qf call AdjustWindowHeight(3, 10)
function! AdjustWindowHeight(minheight, maxheight)
  exe max([min([line("$")+1, a:maxheight]), a:minheight]) . "wincmd _"
endfunction

"au BufRead,BufNewFile ?akefile set noexpandtab
"au BufRead,BufNewFile ?akefile set shiftwidth=4
"au BufRead,BufNewFile ?akefile set tabstop=4

""""""""""""""""""""""""""""""""""""""
"BACKUP SETTING
""""""""""""""""""""""""""""""""""""""
set backup
"set nobackup
set backupext=.bak
"set nowritebackup
set backupdir=~/.vim/backup
set backupcopy=yes

set viminfo='20,%1,f1,<500
"NOT save mapping and options
"set sessionoptions="buffers,curdir,folds,tabpages,winsize"

"Sets undo history size
set history=1000
"Persistent UNDO
if exists("&undodir")
    set undofile                " Save undo's after file closes
    set undodir=~/.vim/undo     " where to save undo histories
    set undolevels=1000         " How many undos
    set undoreload=10000        " number of lines to save for undo
endif

""""""""""""""""""""""""""""""""""""""
"KEY MAPPING
"It seems ALT+k is not portable
"Alt+k = Esc+k in putty
""""""""""""""""""""""""""""""""""""""
" <F1> used by help
map <F2> :cnext<CR>
map <F3> :cpre<CR>
map <F5> <Esc>:Tlist<CR>
map <F9> :bo cwindow<CR>

"move
map <Space> <C-F>

map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-h> <C-w>h
map <C-l> <C-w>l
map <C-_> <C-w>_
map <C-=> <C-w>=

"save & close
" fast close
map <C-c> :close<CR>
" fast save
map <Esc>s :w!<CR>
imap <Esc>s <Esc>:w!<CR>

"search & replace
"map <F3> :g/\<<C-R><C-W>\>/
map <F1> :execute 'vimgrep /'.expand('<cword>').'/gj '.expand('%')<CR> :bo copen<CR>

map <Leader>s :%s/\<<C-R><C-W>\>/

""nnoremap [I [I:let nr = input("Which one: ")<Bar>if nr != ""<Bar>exe "silent! normal " . nr ."[\t"<Bar>endif<CR>
""nnoremap ]I ]I:let nr = input("Which one: ")<Bar>if nr != ""<Bar>exe "silent! normal " . nr ."]\t"<Bar>endif<CR>

"copy
""use clipboard as default register (= "+y")
set clipboard=unnamedplus

vmap Y "+y
nmap P "+p
"'copy between different vim instance
vmap xr c<Esc>:r $HOME/.vimxfer<CR>
vmap xw :w! $HOME/.vimxfer<CR>
nmap xr :r $HOME/.vimxfer<CR>
nmap xw :.w! $HOME/.vimxfer<CR>

""""""""""""""""""""""""""""""""""""""
"PLUGIN'S SETTING
""""""""""""""""""""""""""""""""""""""
"PATHOGEN
call pathogen#infect()

"VIM-Plug
call plug#begin()
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

""dart/flutter
"Plug 'dart-lang/dart-vim-plugin'
"Plug 'natebosch/vim-lsc'
"Plug 'natebosch/vim-lsc-dart'
call plug#end()

"CSCOPE
set nocscopeverbose
set cscopequickfix=s-,c-,d-,i-,t-,e-
set cst
set csto=0
if filereadable("cscope.out")
  cs add cscope.out
elseif filereadable("../cscope.out")
  cs add ../cscope.out
elseif filereadable("../../cscope.out")
  cs add ../../cscope.out
elseif filereadable("../../../cscope.out")
  cs add ../../../cscope.out
elseif filereadable("../../../../cscope.out")
  cs add ../../../../cscope.out
elseif filereadable("../../../../../cscope.out")
  cs add ../../../../../cscope.out
endif
set tags=./tags

"NERDTree
let NERDTreeWinPos = "right"
let NERDChristmasTree=0
let NERDTreeShowHidden=0
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '~'
" Start NERDTree. If a file is specified, move the cursor to its window.
autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * NERDTree | if argc() > 0 || exists("s:std_in") | wincmd p | endif
autocmd VimEnter * if !argc() | NERDTree | endif

"DoxygenToolkit.vim
let g:DoxygenToolkit_briefTag_pre = ""

"EnhCommentify
let EnhCommentifyRespectIndent = "yes"
let EnhCommentifyPretty = "yes"

"clang_complete
let g:clang_library_path = '/app/clang/3.1/LMWP3/lib'

"ALE"
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_sign_error = 'X'
let g:ale_sign_warning = 'Z'
let g:ale_lint_on_text_changed = 'never'

"vim-go"
let g:go_bin_path = "/home/eyonggu/go/bin"
let g:go_auto_type_info = 1


"fzf"
nnoremap <silent> <C-P> :FZF<CR>
nnoremap <silent> <Leader>rg :Rg -w <C-R><C-W><CR>
nnoremap <silent> <Leader>b :Buffers<CR>
""all arguments are passed directly to rg process (https://github.com/junegunn/fzf.vim/issues/838)
command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".<q-args>, 1, fzf#vim#with_preview(), <bang>0)


""""""""""""""""""""""""""""""""""""""
"REGULAR TASKS
"""""""""""""""""""""""""""""""""""""
"list functions in current fpl file
"nnoremap <Leader>fpl :vimgrep /^[^ ]*:$/ %<CR> :copen<CR>

"For local replace
nnoremap gr gd[{V%::s/<C-R>///gc<left><left><left>

"For global replace
nnoremap gR gD:%s/<C-R>///gc<left><left><left>

"insert date
inoremap <Leader>dt  <C-R>=strftime("%Y-%m-%d")<CR>

""""""""""""""""""""""""""""""""""""""
"RCS code rule
"""""""""""""""""""""""""""""""""""""
autocmd BufNewFile,BufRead /repo/eyonggu/rcs-*/*.c,/repo/eyonggu/rcs-*/*.h setlocal cindent shiftwidth=8 noexpandtab softtabstop=8 textwidth=79

